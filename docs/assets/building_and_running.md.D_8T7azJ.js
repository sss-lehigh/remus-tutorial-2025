import{_ as a,c as i,o as n,a0 as e}from"./chunks/framework.CxIJk_Sz.js";const k=JSON.parse('{"title":"Building And Running A Remus Program","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"building_and_running.md","filePath":"building_and_running.md"}'),t={name:"building_and_running.md"};function l(p,s,h,o,r,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="building-and-running-a-remus-program" tabindex="-1">Building And Running A Remus Program <a class="header-anchor" href="#building-and-running-a-remus-program" aria-label="Permalink to &quot;Building And Running A Remus Program&quot;">​</a></h1><p>Running a distributed program is always challenging. It requires you to launch separate processes on separate machines, and to pass the right configuration into those processes so that they know how to interact with each other.</p><p>In this step of the Remus tutorial, you&#39;ll learn how to build a simple Remus program and run it on several CloudLab machines.</p><h2 id="working-in-the-remus-repository" tabindex="-1">Working In The Remus Repository <a class="header-anchor" href="#working-in-the-remus-repository" aria-label="Permalink to &quot;Working In The Remus Repository&quot;">​</a></h2><p>In the previous step, you checked out the <code>remus</code> repository from GitHub and set up a Docker container for building the code. In this step, you will add and edit files in the <code>benchmark</code> subfolder.</p><p>In that folder, you&#39;ll see a <code>CMakeLists.txt</code> file. It describes programs to build, usually using just two lines per program:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ds_launch ds_launch.cc)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ds_launch </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rdma)</span></span></code></pre></div><p>This corresponds to a simple program design, where a program consists of one <code>.cc</code> file, along with however many <code>.h</code> files it needs to include. It is possible to build more complex programs with Remus, but in this tutorial, you&#39;ll want to stick to this approach.</p><p>To get started, make a new file called <code>benchmark/hello.cc</code>:</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::endl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Then add this to the <code>CMakeLists.txt</code> file:</p><div class="language-cmake vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the &quot;hello&quot; executable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add_executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello hello.cc)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">target_link_libraries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRIVATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rdma)</span></span></code></pre></div><p>In order to build your new program, type <code>make --no-print-directory</code> in the <strong>parent</strong> of the <code>benchmark</code> folder. You should see output like this:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- Using standard 20</span></span>
<span class="line"><span>-- Using LOG_LEVEL=RELEASE</span></span>
<span class="line"><span>-- Configuring done (0.0s)</span></span>
<span class="line"><span>-- Generating done (0.0s)</span></span>
<span class="line"><span>-- Build files have been written to: /root/remus-tutorial-2025/build</span></span>
<span class="line"><span>[ 10%] Building CXX object rdma/CMakeFiles/root_test.dir/test/root.cc.o</span></span>
<span class="line"><span>[ 20%] Linking CXX executable root_test</span></span>
<span class="line"><span>[ 20%] Built target root_test</span></span>
<span class="line"><span>[ 30%] Building CXX object rdma/CMakeFiles/read_test.dir/test/read.cc.o</span></span>
<span class="line"><span>[ 40%] Linking CXX executable read_test</span></span>
<span class="line"><span>[ 40%] Built target read_test</span></span>
<span class="line"><span>[ 50%] Building CXX object rdma/CMakeFiles/write_test.dir/test/write.cc.o</span></span>
<span class="line"><span>[ 60%] Linking CXX executable write_test</span></span>
<span class="line"><span>[ 60%] Built target write_test</span></span>
<span class="line"><span>[ 70%] Building CXX object rdma/CMakeFiles/helloworld_test.dir/test/helloworld.cc.o</span></span>
<span class="line"><span>[ 80%] Linking CXX executable helloworld_test</span></span>
<span class="line"><span>[ 80%] Built target helloworld_test</span></span>
<span class="line"><span>[ 90%] Building CXX object benchmark/CMakeFiles/hello.dir/hello.cc.o</span></span>
<span class="line"><span>[100%] Linking CXX executable hello</span></span>
<span class="line"><span>[100%] Built target hello</span></span></code></pre></div><p>This output indicates that remus built a few test programs, and then built your program. The program will be built in the <code>build/benchmark</code> subfolder. You can run it on your local machine by typing <code>./build/benchmark/hello</code>.</p><h2 id="managing-command-line-arguments" tabindex="-1">Managing Command-Line Arguments <a class="header-anchor" href="#managing-command-line-arguments" aria-label="Permalink to &quot;Managing Command-Line Arguments&quot;">​</a></h2><p>When running a Remus program, the process on each node needs a lot of configuration information, including:</p><ul><li>The name of the machine where it is running</li><li>The names of the machines that are serving as memory nodes</li><li>How many memory segments are being hosted on each memory node, and how big they are</li><li>The port on which to connect to those memory nodes</li><li>The names of the machines that are serving as compute nodes</li><li>How many threads should run on each compute node</li><li>How to configure the queue pairs from each compute node to each memory node</li><li>Other resource management details</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>These configuration parameters will be explained in more detail later. If they don&#39;t make sense right now, it&#39;s OK.</p></div><p><code>remus::ArgMap</code> helps with providing and managing this information. You can <code>import</code> one or more lists of <code>remus::Arg</code> objects into an <code>ArgMap</code>, and then <code>parse</code> the <code>ArgMap</code>. This will terminate the program if any required arguments are not provided, and otherwise leave you with an unordered map that your code can query to get the arguments to the program.</p><p>We provide a list of arguments called <code>remus::ARGS</code>, which describes all of the standard Remus configuration information. To test it out, replace <code>hello.cc</code>:</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;memory&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;remus/remus.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  remus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Configure and parse the arguments</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArgMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ARGS);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argc, argv);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::HELP)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">usage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">report_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>If you build and re-run <code>build/benchmark/hello</code>, you should see an error message:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>REMUS::DEBUG is false</span></span>
<span class="line"><span>hello</span></span>
<span class="line"><span>  --alloc-pol: How should ComputeThreads pick Segments for allocation: RAND, GLOBAL-RR, GLOBAL-MOD, LOCAL-RR, LOCAL-MOD</span></span>
<span class="line"><span>  --cn-ops-per-thread: The maximum number of concurrent messages that a thread can issue without waiting on a completion.</span></span>
<span class="line"><span>  --cn-thread-bufsz: The log_2 of the size of the buffer to allocate to each compute thread.</span></span>
<span class="line"><span>  --cn-threads: The number of threads to run on each compute node</span></span>
<span class="line"><span>  --cn-wrs-per-seq: The number of sequential operations that a thread can perform concurrently.</span></span>
<span class="line"><span>  --first-cn-id: The node-id of the first node that performs computations.</span></span>
<span class="line"><span>  --first-mn-id: The node-id of the first node that hosts memory segments.</span></span>
<span class="line"><span>  --help: Print this help message</span></span>
<span class="line"><span>  --last-cn-id: The node-id of the last node that performs computations.</span></span>
<span class="line"><span>  --last-mn-id: The node-id of the last node that hosts memory segments.</span></span>
<span class="line"><span>  --mn-port: The port that memory nodes should use to wait for connections during the initialization phase.</span></span>
<span class="line"><span>  --node-id: A numerical identifier for this node.</span></span>
<span class="line"><span>  --qp-lanes: Each compute node should have qp-lanes connections to each memory node.</span></span>
<span class="line"><span>  --qp-sched-pol: How to choose which qp to use: RAND, RR, or MOD</span></span>
<span class="line"><span>  --seg-size: The size of each remotely-accessible memory segment on each memory node will be 2^{seg-size}.</span></span>
<span class="line"><span>  --segs-per-mn: The number of remotely-accessible memory segments on each memory node.</span></span>
<span class="line"><span>terminate called after throwing an instance of &#39;std::runtime_error&#39;</span></span>
<span class="line"><span>  what():  Error: \`--cn-threads\` is required</span></span>
<span class="line"><span>Aborted (core dumped)</span></span></code></pre></div><p>Let&#39;s try to provide reasonable values for all of the required arguments:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./build/benchmark/hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --seg-size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 29</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --segs-per-mn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --first-cn-id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --last-cn-id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --first-mn-id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --last-mn-id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --qp-lanes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --qp-sched-pol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mn-port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 33330</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cn-threads</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cn-ops-per-thread</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cn-thread-bufsz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --alloc-pol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GLOBAL-RR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --node-id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>This results in the following output from <code>report_config</code>, which is just a dump of the provided configuration, in CSV format:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>REMUS::DEBUG is false</span></span>
<span class="line"><span>hello (--alloc-pol --cn-ops-per-thread --cn-thread-bufsz --cn-threads --cn-wrs-per-seq --first-cn-id --first-mn-id --help --last-cn-id --last-mn-id --mn-port --node-id --qp-lanes --qp-sched-pol --seg-size --segs-per-mn ), GLOBAL-RR, 4, 20, 2, 16, 2, 0, false, 3, 1, 33330, 0, 2, RR, 29, 2</span></span></code></pre></div><h2 id="running-on-cloudlab" tabindex="-1">Running On CloudLab <a class="header-anchor" href="#running-on-cloudlab" aria-label="Permalink to &quot;Running On CloudLab&quot;">​</a></h2><p>Now it&#39;s time to run the program on CloudLab, instead of on your local machine. Participants in this tutorial should have been given a CloudLab allocation consisting of several &quot;r320&quot; machine names of the form <code>apt123</code>. Names prefixed with <code>apt</code> are public names, accessible from anywhere in the world. However, from inside of CloudLab, machines can be accessed using 0-indexed names: <code>node0</code>, <code>node1</code>, etc. You&#39;ll see how this works in the next tutorial step. For now, the goal is just to get a program running on several machines at once.</p><p>This tutorial assumes that you&#39;ve already provided your ssh key to CloudLab. That key is necessary for connecting via <code>ssh</code> and <code>scp</code>. Now it&#39;s time to do a one-time installation of important libraries on the machines you&#39;ve been allocated.</p><p>You can do all of this through the <code>cl.sh</code> script, but it needs some configuration. To avoid checking your configuration into the repository by mistake, you should make use of the <code>local/</code> folder. If it doesn&#39;t exist, create it and then copy the <code>cl.config</code> template into it:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cl.config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local/my_config</span></span></code></pre></div><p>Assuming that you&#39;ve been allocated three machines with the names <code>apt030</code>, <code>apt132</code>, and <code>apt028</code>, you should now update your config file accordingly. Note that the order of the machine names matters!</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">domain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apt.emulab.net</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">machines</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apt030</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt132</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt028</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your_cloudlab_username</span></span></code></pre></div><p>Now you should be able to use <code>cl.sh</code> to configure all of the machines:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./cl.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local/my_config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install-deps</span></span></code></pre></div><p>This script uses <code>screen</code> to install dependencies on all of the machines in parallel. While it&#39;s running, you can use <code>ctrl-j</code> as the command character for navigating among the open screens (e.g., <code>ctrl-j 1</code> to switch to the second screen). This can be useful if the software update process requires any input.</p><p>Once the installation has finished, all screens will close, and then the status of the RDMA cards on the CloudLab machines will be reported. It typically looks like this:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>hca_id: mlx4_0</span></span>
<span class="line"><span>        transport:                      InfiniBand (0)</span></span>
<span class="line"><span>        fw_ver:                         2.42.5000</span></span>
<span class="line"><span>        node_guid:                      f452:1403:0015:6fc0</span></span>
<span class="line"><span>        sys_image_guid:                 f452:1403:0015:6fc3</span></span>
<span class="line"><span>        vendor_id:                      0x02c9</span></span>
<span class="line"><span>        vendor_part_id:                 4099</span></span>
<span class="line"><span>        hw_ver:                         0x1</span></span>
<span class="line"><span>        board_id:                       MT_1090120019</span></span>
<span class="line"><span>        phys_port_cnt:                  2</span></span>
<span class="line"><span>                port:   1</span></span>
<span class="line"><span>                        state:                  PORT_ACTIVE (4)</span></span>
<span class="line"><span>                        max_mtu:                4096 (5)</span></span>
<span class="line"><span>                        active_mtu:             4096 (5)</span></span>
<span class="line"><span>                        sm_lid:                 203</span></span>
<span class="line"><span>                        port_lid:               108</span></span>
<span class="line"><span>                        port_lmc:               0x00</span></span>
<span class="line"><span>                        link_layer:             InfiniBand</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                port:   2</span></span>
<span class="line"><span>                        state:                  PORT_ACTIVE (4)</span></span>
<span class="line"><span>                        max_mtu:                4096 (5)</span></span>
<span class="line"><span>                        active_mtu:             1024 (3)</span></span>
<span class="line"><span>                        sm_lid:                 0</span></span>
<span class="line"><span>                        port_lid:               0</span></span>
<span class="line"><span>                        port_lmc:               0x00</span></span>
<span class="line"><span>                        link_layer:             Ethernet</span></span></code></pre></div><p>There&#39;s one more step before you can run your program on those machines: <code>cl.sh</code> needs to know the arguments to provide to the program. Copy the experiment configuration template:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cl.experiment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local/my_experiment</span></span></code></pre></div><p>Then edit it. Note that in the example below, the <code>--node-id</code> flag is not included, but all other arguments are provided:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exefile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">build/benchmark/hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">experiment_args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--seg-size 29 --segs-per-mn 2 --first-cn-id 2 --last-cn-id 2 --first-mn-id 0 --last-mn-id 1 --qp-lanes 2 --qp-sched-pol RR --mn-port 33330 --cn-threads 2 --cn-ops-per-thread 4 --cn-thread-bufsz 20 --alloc-pol GLOBAL-RR&quot;</span></span></code></pre></div><p>Build the program, transfer it to CloudLab, and run it on all machines:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./cl.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local/my_config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local/my_experiment</span></span></code></pre></div><p>When the program terminates, screen will remain open, so you can see each program&#39;s output. To close a screen, type <code>exit</code> or press <code>ctrl-d</code>.</p><p>If you do not need to re-build and re-upload the executable before running it again, you can replace <code>build-run</code> with <code>run</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./cl.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local/my_config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local/my_experiment</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Coupling this command with different experiment configuration files is useful when performing batches of experiments.</p></div>`,50)]))}const g=a(t,[["render",l]]);export{k as __pageData,g as default};
