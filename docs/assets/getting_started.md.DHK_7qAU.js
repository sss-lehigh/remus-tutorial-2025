import{_ as s,c as a,o as i,a0 as t}from"./chunks/framework.CxIJk_Sz.js";const o="/assets/docker_screenshot.7OVGaPpT.png",k=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"getting_started.md","filePath":"getting_started.md"}'),n={name:"getting_started.md"};function l(r,e,c,d,p,h){return i(),a("div",null,e[0]||(e[0]=[t(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>This tutorial assumes that you are comfortable using a Unix terminal, that you have some experience programming in C++, and that you have a basic understanding of concurrency topics (threads, locks, compare-and-swap, data races).</p><p>In this step of the Remus tutorial, you&#39;ll learn about the required tools and software for building Remus programs, you&#39;ll download the Remus source code, and you&#39;ll learn about the files and folders in the Remus repository.</p><h2 id="software-configuration" tabindex="-1">Software Configuration <a class="header-anchor" href="#software-configuration" aria-label="Permalink to &quot;Software Configuration&quot;">​</a></h2><p>Remus is a C++ library designed for the Linux operating system. Since this tutorial is focused on building and running Remus applications on <a href="https://www.cloudlab.us/" target="_blank" rel="noreferrer">NSF CloudLab</a>, the easiest way to get started is to use <a href="https://www.docker.com/" target="_blank" rel="noreferrer">Docker</a>. This step of the tutorial will help you get set up, via Docker, without needing any other software on your development machine.</p><p>Below, you will find a <code>Dockerfile</code> that defines a container image that matches the configuration of CloudLab &quot;r320&quot; nodes. It includes the following software:</p><ul><li>Operating System: Ubuntu Linux 24.04</li><li>C++20-Compatible Compiler: Clang++18</li><li>Standard Build Tools and Libraries: <code>make</code>, <code>cmake</code>, <code>git</code>, <code>libnuma</code>, <code>gdb</code>, <code>python3</code></li><li>RDMA Libraries: <code>librdmacm</code>, <code>libibverbs</code></li><li>Other Tools: <code>screen</code></li></ul><p>To get started, navigate to the folder where you&#39;d like to work, and paste the following text as a file named <code>Dockerfile</code>. (Note: the <a href="https://github.com/sss-lehigh/remus-tutorial-2025" target="_blank" rel="noreferrer">Remus GitHub Repository</a> also contains a copy of this <code>Dockerfile</code>.)</p><div class="language-docker vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ubuntu:24.04</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get latest software (standard ubuntu package manager)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apt-get update -y</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apt-get upgrade -y</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential python3 cmake git man curl libnuma-dev librdmacm-dev libibverbs-dev screen lsb-release software-properties-common openssh-client</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Get LLVM 18</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl -O https://apt.llvm.org/llvm.sh</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chmod +x llvm.sh</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./llvm.sh 18</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rm ./llvm.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start in the \`/root\` folder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/root&quot;</span></span></code></pre></div><p>To make a container image from this Dockerfile, go to the folder where this Dockerfile exists, and type the following (don&#39;t forget the trailing <code>.</code>):</p><p><code>docker buildx build --platform=linux/amd64 -t remus .</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>On Mac and Linux, you might need to prefix the command with <code>sudo</code></p></div><p>Finally, launch an instance of the container. When you launch an instance, you&#39;ll want to map a part of your local filesystem into the container. A good choice is the location where you created the <code>Dockerfile</code>. The following command assumes you put the <code>Dockerfile</code> in <code>/home/sss/remus_tutorial</code>. If you are working in another location, be sure to change that part of the command.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/sss/remus_tutorial/:/root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remus</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>On Mac and Linux, you might need to prefix the command with <code>sudo</code></p></div><p>When you enter the above command, you should see something like the following:</p><p><img src="`+o+`" alt="Screenshot"></p><p>This indicates that you&#39;ve successfully created a container instance. In the container instance, you&#39;re logged in as root, in the <code>/root</code> folder, and if you type <code>ls</code>, you should see that your folder has been mapped into the container correctly.</p><p>To close your container, type <code>exit</code> or press <code>ctrl-d</code>.</p><h2 id="getting-the-code" tabindex="-1">Getting The Code <a class="header-anchor" href="#getting-the-code" aria-label="Permalink to &quot;Getting The Code&quot;">​</a></h2><p>If you are not in the <code>remus</code> container, launch it with the command you created in the previous step.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You might want to create a script for that command, so it&#39;s easier to launch containers.</p></div><p>From inside the container, in the <code>/root</code> folder, check out the remus repository. Note that by checking out your repository from <em>inside</em> of the Docker instance, you are guaranteed that line endings will be correct regardless of whether your development machine uses Linux, MacOS, or Windows.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/sss-lehigh/remus-tutorial-2025.git</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you are working on a private research project, you will probably want to <strong>fork</strong> our repository, set up permissions on your fork, and set up ssh keys inside of your Docker instance.</p></div><h2 id="a-quick-tour" tabindex="-1">A Quick Tour <a class="header-anchor" href="#a-quick-tour" aria-label="Permalink to &quot;A Quick Tour&quot;">​</a></h2><p>The folder you just checked out should have the following files and folders in it:</p><p>If you type <code>ls</code> from the <code>remus</code> subfolder, you should see the following files and folders:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── .gitignore</span></span>
<span class="line"><span>├── cl.config</span></span>
<span class="line"><span>├── cl.experiment</span></span>
<span class="line"><span>├── cl.sh</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>├── Dockerfile</span></span>
<span class="line"><span>├── Makefile</span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── benchmark/</span></span>
<span class="line"><span>├── cmake/</span></span>
<span class="line"><span>├── rdma/</span></span></code></pre></div><p>Here&#39;s some more information about these files and folders:</p><ul><li><code>cl.sh</code> is a script for interacting with CloudLab</li><li><code>cl.config</code> is a template for providing configuration information to <code>cl.sh</code></li><li><code>cl.experiment</code> is a template for providing information to <code>cl.sh</code> about how to run experiments.</li><li><code>CMakeLists.txt</code> is used by <code>cmake</code> to configure and build the code. You won&#39;t need to invoke this directly, it is handled through the <code>Makefile</code>.</li><li><code>Dockerfile</code> should match the <code>Dockerfile</code> you created above</li><li><code>Makefile</code> provides <code>make clean</code> and <code>make</code> commands for building</li><li><code>benchmark/</code> has a few example programs</li><li><code>cmake/</code> has some configuration scripts so that <code>cmake</code> can find the RDMA libraries.</li><li><code>rdma/</code> has all of the Remus code, and also some small test programs</li></ul><p>In most cases, you&#39;ll only write code in the <code>benchmark/</code> subfolder. It has its own <code>CMakeLists.txt</code> file, where you can provide the names of new programs that you want to build.</p><p>When you&#39;re ready to test your code, you&#39;ll need to copy <code>cl.config</code> and <code>cl.experiment</code>. We recommend creating a <code>local/</code> subfolder (which <code>.gitignore</code> prevents from being committed to the repository) for your copies of these files.</p>`,33)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
